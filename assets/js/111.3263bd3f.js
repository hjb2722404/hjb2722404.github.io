(window.webpackJsonp=window.webpackJsonp||[]).push([[111],{546:function(t,s,a){"use strict";a.r(s);var n=a(15),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"js-高程4阅读笔记-1-1-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#js-高程4阅读笔记-1-1-3"}},[t._v("#")]),t._v(" js 高程4阅读笔记（1）-1-3")]),t._v(" "),a("p",[t._v("[TOC]")]),t._v(" "),a("h2",{attrs:{id:"_1-什么是javascript"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-什么是javascript"}},[t._v("#")]),t._v(" 1. 什么是javascript")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("js组成")]),t._v(" "),a("p",[t._v("完整的javascript由以下三部分组成：")])])]),t._v(" "),a("ul",[a("li",[t._v("核心（ECMAScript）【其标准由ECMA组织TC39委员会维护】，js的核心功能")]),t._v(" "),a("li",[t._v("文档对象模型（DOM）【其标准由W3C维护】，提供与网页内容交互的方法和接口")]),t._v(" "),a("li",[t._v("浏览器对象模型（BOM）【目前尚未形成标准】，提供与浏览器交互的方法和接口")])]),t._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[a("p",[a("strong",[t._v("宿主环境提供ECMAScript的基准实现和与环境自身交互必需的扩展")])])]),t._v(" "),a("li",[a("p",[t._v("ECMA规范包含的基本模块：")]),t._v(" "),a("ul",[a("li",[t._v("语法")]),t._v(" "),a("li",[t._v("类型")]),t._v(" "),a("li",[t._v("语句")]),t._v(" "),a("li",[t._v("关键词")]),t._v(" "),a("li",[t._v("保留词")]),t._v(" "),a("li",[t._v("操作符")]),t._v(" "),a("li",[t._v("全局对象")])])]),t._v(" "),a("li",[a("p",[t._v("js与ECMAScript的关系")]),t._v(" "),a("ol",[a("li",[t._v("js是对ECMAScript规范的实现。（Adobe ActionScript也是对ECMAScript的实现）")]),t._v(" "),a("li",[t._v("对ECMAScript的实现时js的核心。")])])]),t._v(" "),a("li",[a("p",[t._v("DOM组成和级别")]),t._v(" "),a("ol",[a("li",[t._v("DOM规范由两个模块组成\n"),a("ul",[a("li",[t._v("DOM Core:  提供了一种映射XML文档，从而方便访问和操作文档任意部分的方式；")]),t._v(" "),a("li",[t._v("DOM HTML：扩展了DOM Core，增加了特定于HTML的对象和语法；")])])]),t._v(" "),a("li",[t._v("DOM2比DOM1新增的模块：\n"),a("ul",[a("li",[t._v("DOM视图：描述追踪文档不同视图（比如应用CSS样式前后就是不同的视图）的接口")]),t._v(" "),a("li",[t._v("DOM事件：描述事件即事件处理的接口")]),t._v(" "),a("li",[t._v("DOM样式： 描述处理元素CSS样式的接口")]),t._v(" "),a("li",[t._v("DOM 遍历和范围： 描述遍历和操作DOM树的接口。")])])]),t._v(" "),a("li",[t._v("DOM3比DOM2新增的模块\n"),a("ul",[a("li",[t._v("统一的方式加载和保存文档的方法（DOM Load and Save）")]),t._v(" "),a("li",[t._v("验证文档的方法（DOM Validation）")]),t._v(" "),a("li",[t._v("支持了所有 XML1.0的特性；")])])]),t._v(" "),a("li",[t._v("DOM4比DOM3新增的模块\n"),a("ul",[a("li",[t._v("Mutation Observers")])])])])]),t._v(" "),a("li",[a("p",[t._v("其它语言的DOM标准")]),t._v(" "),a("ul",[a("li",[t._v("可伸缩矢量图——SVG")]),t._v(" "),a("li",[t._v("数学标记语言——MathML")]),t._v(" "),a("li",[t._v("同步多媒体集成语言——SML")])])]),t._v(" "),a("li",[a("p",[t._v("BOM是用于操控浏览器除页面之外的部分的接口")])]),t._v(" "),a("li",[a("p",[t._v("BOM的能力：")]),t._v(" "),a("ul",[a("li",[t._v("弹出新浏览器窗口的能力")]),t._v(" "),a("li",[t._v("移动、缩放和关闭浏览器窗口的能力")]),t._v(" "),a("li",[t._v("navigator 对象：提供关于浏览器的详尽信息")]),t._v(" "),a("li",[t._v("location 对象：提供浏览器加载页面的详尽信息")]),t._v(" "),a("li",[t._v("screen 对象：提供关于用户屏幕分辨率的详尽信息")]),t._v(" "),a("li",[t._v("performance对象：提供浏览器内存占用、导航行为和时间统计的详尽信息；")]),t._v(" "),a("li",[t._v("对 cookie的支持")]),t._v(" "),a("li",[t._v("其它自定义对象，比如：XMLHttpRequest ,  ActiveXObject")])])])]),t._v(" "),a("h2",{attrs:{id:"_2-html中的javascript"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-html中的javascript"}},[t._v("#")]),t._v(" 2. HTML中的JavaScript")]),t._v(" "),a("ol",[a("li",[a("p",[a("code",[t._v("<script>")]),t._v(" 元素属性")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("async： 立即下载脚本但不应该阻塞其它操作，只针对外部脚本，设置该属性的脚本代码不该修改DOM；异步代码会在load事件前执行，但可能会在DOMContentLoaded之前或之后。")])]),t._v(" "),a("li",[a("p",[t._v("charset:   浏览器不care")])]),t._v(" "),a("li",[a("p",[t._v("crossorigin：跨域资源需要认证时配置该属性")])]),t._v(" "),a("li",[a("p",[t._v("defer：立即下载，但延迟到文档被完全解析和显示之后再执行，只针对外部脚本。——利用此特性将文档加载好才需要执行的代码放置在单独的脚本中使用这种方式加载，可提供首次加载性能；defer的代码会在 DOMContentLoaded事件之前执行。")])]),t._v(" "),a("li",[a("p",[t._v("integrity：签名验证。在引用第三方CDN资源时可以加此属性以保证安全")])]),t._v(" "),a("li",[a("p",[t._v("type：标识语言类型，默认都是 text/javascript， 当设置为 template时，可作为模板容器，当设置为 module时，可使用ES6语法， 当设置为 x-shader/x-fragment 时，可作为 WebGL 着色代码块使用。")])]),t._v(" "),a("li",[a("p",[t._v("使用脚本动态创建script标签相当于异步加载，但需要设置其async属性为false，并且由于这种方式对浏览器预加载器不可见，会影响其优先级，如果需要提升其优先级，需要在文档头部显示声明：")]),t._v(" "),a("div",{staticClass:"language-html line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("link")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("rel")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("preload"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("href")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("xxx.js"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])])]),t._v(" "),a("li",[a("p",[t._v("使用  // <![CDATA [.....//]] > 语法 包裹 script标签中的代码可以兼容XHTML浏览器，或者选择将代码放置在外部文件中。")])])])]),t._v(" "),a("li",[a("p",[t._v("文档模式")]),t._v(" "),a("ul",[a("li",[t._v("混杂模式： 让IE支持一些非标准特性，通过省略头部doctype声明来触发")]),t._v(" "),a("li",[t._v("标准模式：让IE具有兼容标准的行为，通过doctype触发")]),t._v(" "),a("li",[t._v("准标注模式：支持很多标准的特性，但没有标准规定得那么严格，通过transitional 和 frameset 触发；")])])])]),t._v(" "),a("h2",{attrs:{id:"_3-语言基础"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-语言基础"}},[t._v("#")]),t._v(" 3.语言基础")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("标识符")]),t._v(" "),a("ul",[a("li",[t._v("是变量、函数、属性或函数参数的名称")]),t._v(" "),a("li",[t._v("第一个字符必须是字母、下划线或美元符号")]),t._v(" "),a("li",[t._v("驼峰是最佳实践，因为ECMA内置的函数和对象也是用驼峰的")])])]),t._v(" "),a("li",[a("p",[t._v("严格模式预处理指令可放在函数体内单独作用于这个函数")])]),t._v(" "),a("li",[a("p",[t._v("自动分号插入【延伸】：")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("规则：")]),t._v(" "),a("ul",[a("li",[t._v("从左到右解析程序，当遇到一个不符合任何文法产生式的Token(即违规Token)，那么只要满足下面条件之一就在违规Token前面自动加入分号\n"),a("ul",[a("li",[t._v("至少一个换行符分割了违规Token和前一个Token")]),t._v(" "),a("li",[t._v("违规Token是"),a("code",[t._v("}")])])])]),t._v(" "),a("li",[t._v("从左到右解析程序，Token输入流已经结束，当解析器无法将输入Token流解析成单个完整的ECMAScritp Program(即语法树),那么就在输入流的结束位置自动插入分号;")])]),t._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" \n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 自动插入分号后：")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 2是违规token，但是因为和前面的1之间有一个换行符，所以在它前面加了分号")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// } 是违规Token，但根据规则，在它前面加了分号")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 3之后Token流结束，但此时解析器无法将其解析成完成的program，所以在3后面加了分号")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 最终结果如下：")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" \n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 这是符合文法规则的")]),t._v("\n\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br")])]),a("ul",[a("li",[a("p",[t._v("从左到右解析程序，遇到一个某些文法产生式允许的Token，但是此产生式是受限产生式，受限产生式紧跟在【no LineTerminator here】标识后的第一个终结符或非终结符的Token叫做受限Token，当至少一个换行符分割了受限的Token和前一个Token，那么就在受限的Token前面自动插入分号")])]),t._v(" "),a("li",[a("p",[t._v("在以下情形下，不会自动插入分号：")]),t._v(" "),a("ul",[a("li",[t._v("如果插入分号后解析结果是空语句；")])]),t._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" c "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" d\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// else 此时为违规 Token[合规的应该是{号]，但是如果在它前面加了分号，解析后就会成为一个空语句【c前面会被加分号】：")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n ；"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("c"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("d"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 最终：")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 空语句")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v("\nc"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("d"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 插入分号后会形成空语句【因为if和else后面的语句块括号可以省略】")]),t._v("\n\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br")])]),a("ul",[a("li",[t._v("如果插入分号后它成为for语句头部的两个分号之一")])]),t._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" b\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 虽然违规Token ) [合规的应该是分号] 与前面的Token b之间有一个换行符，但因为上述规则，自动插入分号永远不会插入成for语句头部两个分号之一，所以这里不会自动插入分号，程序会报错  ")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])])]),t._v(" "),a("li",[a("p",[t._v("【附1：受限产生式】：")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("我们把产生式 [no LineTerminator here]后面的 "),a("code",[t._v("token")]),t._v("叫做受限 "),a("code",[t._v("token")]),t._v("，如果在 "),a("code",[t._v("token")]),t._v("和 受限 "),a("code",[t._v("token")]),t._v("间存在了至少一个 LineTerminator（换行符），那么会在受限 "),a("code",[t._v("token")]),t._v("前自动加上 分号；")])]),t._v(" "),a("li",[a("p",[t._v("受限的后缀表达式：")]),t._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[t._v("PostfixExpression "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n   LeftHandSideExpression "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("no LineTerminator here"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v(" \n   LeftHandSideExpression "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("no LineTerminator here"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 示例：")]),t._v("\na\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("\nc\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 会被自动插入分号，并解析为：")]),t._v("\na"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br")])]),a("p",[a("strong",[t._v("警示")]),t._v("：后缀++和--后面一定要加分号，并且他们要和所操作的表达式保持在同一行")])]),t._v(" "),a("li",[a("p",[t._v("受限的continue语句：")]),t._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[t._v(" ContinueStatement "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("continue")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("no LineTerminator here"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" Identifier "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 示例：")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("continue")]),t._v(" \nlabel\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 会自动插入分号并解析为：")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("continue")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nlabel\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br")])]),a("p",[a("strong",[t._v("警示")]),t._v("：在多层嵌套循环中，如果使用continiu跳到某个循环的标签名时，要保持他们在同一行")])]),t._v(" "),a("li",[a("p",[t._v("受限的break语句：")]),t._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[t._v("BreakStatement "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("no LineTerminator here"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" Identifier "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 示例")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),t._v("\nlabel\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 会自动插入分号并解析为：")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nlabel\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br")])]),a("p",[a("strong",[t._v("警示")]),t._v(":  在多层嵌套的代码块中，如果使用break + 标签指定跳出某个代码块，则需要保证 break和标签名在同一行；")])]),t._v(" "),a("li",[a("p",[t._v("受限的return语句：")]),t._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[t._v("ReturnStatement "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("no LineTerminator here"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" Expression "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 示例")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v("\na"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 会被自动插入分号并解析为：")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\na"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br")])]),a("p",[a("strong",[t._v("警示")]),t._v("： 需要return的表达式要个return写在同一行")])]),t._v(" "),a("li",[a("p",[t._v("受限的Throw语句：")]),t._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[t._v("ThrowStatement "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throw")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("no LineTerminator here"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" Expression "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 示例")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throw")]),t._v(" \n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'这里发生一个错误'")]),t._v("；\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 会自动插入分号并解析为")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throw")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'这里发生一个错误'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br")])]),a("p",[a("strong",[t._v("警示")]),t._v("：throw和之后要抛出的错误内容要保持在同一行")])])])]),t._v(" "),a("li",[a("p",[t._v("【附2：不会自动插入分号的其它情况】—— 没有违规Token，但可能与编码者期望不符")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("新行以"),a("code",[t._v("(")]),t._v(" 开头")]),t._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("a")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// （a+b） 会被解析为 a 的函数调用参数，实际解析结果：")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("a")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 由于a不是个函数，会报 a is not a function")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br")])])]),t._v(" "),a("li",[a("p",[t._v("新行以"),a("code",[t._v("[")]),t._v("开头")]),t._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v("  a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'a1'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'a2'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" a\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("slice")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 会被解析为")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'a1'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'a2'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("slice")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 这里 a[0,1]里面的逗号不是作为数组元素分割符，而是作为逗号运算符，它会先运算左面的表达式，再运算右面的表达式，然后返回右面表达式的运算结果")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br")])])]),t._v(" "),a("li",[a("p",[t._v("新行以"),a("code",[t._v("/")]),t._v("开头")]),t._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" a\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("test"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 会被解析为：")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("test"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 这里的/会被解析为除法运算符而不是正则符号，最后控制台会抛出一个非法Token错误，提示text前加多了一个.")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br")])])]),t._v(" "),a("li",[a("p",[t._v("新行以"),a("code",[t._v("+")]),t._v("、"),a("code",[t._v("-")]),t._v("、"),a("code",[t._v("&")]),t._v("、"),a("code",[t._v("*")]),t._v(" 开始")]),t._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("  a\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("a\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 会被解析为")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" a\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br")])])]),t._v(" "),a("li",[a("p",[t._v("新行以"),a("code",[t._v(",")]),t._v(" 或 "),a("code",[t._v(".")]),t._v(" 开始")]),t._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" a\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 会被解析为")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("a "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br")])])])])])])]),t._v(" "),a("li",[a("p",[t._v("语句末尾的分号非强制，但最佳实践是加上")])])])]),t._v(" "),a("li",[a("p",[t._v("高程中说"),a("code",[t._v("var")]),t._v("是将变量声明提升到函数作用域顶部，但是在全局作用域中也是会提升的。")])]),t._v(" "),a("li",[a("p",[a("code",[t._v("var")]),t._v(" 与 "),a("code",[t._v("const")]),t._v(" 都是保留字，无法作为变量名，但"),a("code",[t._v("let")]),t._v(" 在非严格模式下不是关键字也不是保留字，可以作为变量名；")]),t._v(" "),a("ul",[a("li",[t._v("使用"),a("code",[t._v("var let = x;")]),t._v("是可以的")]),t._v(" "),a("li",[t._v("但是使用 "),a("code",[t._v("let let = x;")]),t._v(" 或者 "),a("code",[t._v("const let = x")]),t._v("; 会报错。原因是在ES2015前，"),a("code",[t._v("let")]),t._v("还没有作为变量声明存在，有许多程序使用了 "),a("code",[t._v("let")]),t._v(" 作为变量名，为了不产生破坏性的变更，ES2015规范的起草小组（TC39委员会）保留了"),a("code",[t._v("var let = x")]),t._v(" 这样的写法规范；")]),t._v(" "),a("li",[a("code",[t._v("var a = 1, var b = 2;")]),t._v(" 与 "),a("code",[t._v("let a= 1, let b = 2;")]),t._v(" 的报错不同也是因为解析器把第二个"),a("code",[t._v("let")]),t._v(" 当做了变量名；")])])]),t._v(" "),a("li",[a("p",[a("code",[t._v("var")]),t._v(" 声明的范围是函数作用域，"),a("code",[t._v("let")]),t._v(" 声明的范围是块作用域。")])]),t._v(" "),a("li",[a("p",[t._v("块作用域是函数作用域的子集，因此适用于"),a("code",[t._v("var")]),t._v("的作用域限制（？）同样也适用于"),a("code",[t._v("let")]),t._v("；")])]),t._v(" "),a("li",[a("p",[a("code",[t._v("let")]),t._v("与"),a("code",[t._v("const")]),t._v("没有变量提升，因为它们声明而未初始化时是在暂时性死区中，那么为什么引入暂时性死区的概念呢？（？）")]),t._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('// ES2015\n\n{ // 外层块\n  let x = "outer";\n  { // 内层块\n    console.log(x);\n    var refX1 = function () { return x };\n    console.log(refX1());\n    const x = "inner";\n    console.log(x);\n    var refX2 = function () { return x };\n    console.log(refX2());\n  }\n}\n')])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br")])]),a("blockquote",[a("p",[t._v("在 "),a("code",[t._v("const")]),t._v(" 声明之前的内层块中，出现的对 "),a("code",[t._v("x")]),t._v(" 的某些引用或所有引用，是否应该是编译时错误呢？")]),t._v(" "),a("p",[t._v("还是说它们应该是运行时错误呢？")]),t._v(" "),a("p",[t._v("如果它们不是错误，那么是否应该将其解析到 "),a("code",[t._v("x")]),t._v(" 的外部绑定呢？")]),t._v(" "),a("p",[t._v("或者说内层的 "),a("code",[t._v("x")]),t._v(" 在初始化之前，是否应该以 "),a("code",[t._v("undefined")]),t._v(" 为默认值？")]),t._v(" "),a("p",[t._v("如果在 "),a("code",[t._v("const")]),t._v(" 声明之前调用函数 "),a("code",[t._v("refX1")]),t._v("，是否应该和在声明之后调用函数一样，解析到同样的 "),a("code",[t._v("x")]),t._v(" 绑定和相同的值呢？")]),t._v(" "),a("p",[t._v("针对这些情况下的引用，Waldemar Horwat ["),a("a",{attrs:{href:"https://cn.history.js.org/references.html#Horwat:TDZ",target:"_blank",rel:"noopener noreferrer"}},[t._v("2008a"),a("OutboundLink")],1),t._v("] 描述了四种可能的语义：")]),t._v(" "),a("ul",[a("li",[t._v("A1. 词法死区。在同一块中「文本上前于」（textually prior）变量定义而出现的引用，属于错误。")]),t._v(" "),a("li",[t._v("A2. 词法窗口。在同一块中「文本上前于」变量定义而出现的引用，进入外部作用域。")]),t._v(" "),a("li",[t._v("B1. 临时性死区。在同一块中「临时性前于」（temporally prior）变量定义而出现的引用，属于错误。")]),t._v(" "),a("li",[t._v("B2. 临时性窗口。在同一块中「临时性前于」变量定义而出现的引用，进入外部作用域。")])]),t._v(" "),a("p",[t._v("Horwat 感谢 Lars Hansen 将「死区」的概念引入讨论。术语「临时性前于」指的是运行时求值顺序。A2 和 B2 是不可取的，因为这使得块中同一名称在不同的位置，可以有不同的绑定。并且在 B2 的情况下，块中某处的名称甚至在不同的时刻，都可以有不同的绑定。A1 是不可取的，因为它妨碍了以这些声明形式来定义相互递归的函数。A2 的缺点在于，它需要对所有引用进行运行时初始化检查，不过这其中有许多可以被编译器基于相当简单的分析来安全地消除。但在花了近两年时间后 TC39 最终达成的共识，是认为新的词法声明形式应具有 B1 的临时性死区（TDZ）语义。这些语义可由下面这些规则来概括：")]),t._v(" "),a("ul",[a("li",[t._v("在一个作用域内，任何名称都只有唯一的一个绑定。")]),t._v(" "),a("li",[a("code",[t._v("let")]),t._v("、"),a("code",[t._v("const")]),t._v("、"),a("code",[t._v("class")]),t._v("、"),a("code",[t._v("import")]),t._v("、块级函数声明和形参绑定在运行时是死的，直到初始化为止。")]),t._v(" "),a("li",[t._v("访问或赋值给一个未初始化的绑定，属于运行时错误。")])]),t._v(" "),a("p",[t._v("在规范中，上述第一条规则表示为早期错误规则，另外两条则表示为运行时语义算法。")]),t._v(" "),a("p",[t._v("​\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t——"),a("a",{attrs:{href:"https://cn.history.js.org/part-4.html#%E5%9D%97%E7%BA%A7%E5%A3%B0%E6%98%8E%E4%BD%9C%E7%94%A8%E5%9F%9F",target:"_blank",rel:"noopener noreferrer"}},[t._v("JavaScript20年"),a("OutboundLink")],1)])]),t._v(" "),a("blockquote",[a("p",[t._v("最后采纳的解决方案——临时性死区：")]),t._v(" "),a("p",[t._v("在同一块中「临时性前于」（temporally prior）变量定义而出现的引用，属于运行时错误。")])])]),t._v(" "),a("li",[a("p",[t._v("使用"),a("code",[t._v("let")]),t._v(" 在全局作用域声明的变量不会成为"),a("code",[t._v("window")]),t._v("对象的属性。")])]),t._v(" "),a("li",[a("p",[a("code",[t._v("let")]),t._v(" 无法进行条件式声明：")]),t._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" name "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" name "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'undefined'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" name "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// var 可以")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//...")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" name "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" name "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'undefined'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" name "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br"),a("span",{staticClass:"line-number"},[t._v("18")]),a("br"),a("span",{staticClass:"line-number"},[t._v("19")]),a("br")])])]),t._v(" "),a("li",[a("p",[a("code",[t._v("let")]),t._v(" 之所以能够在"),a("code",[t._v("for")]),t._v("循环中为每一次迭代声明新的迭代变量，实际上是一个类似语法糖的功能")]),t._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 源代码")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" p "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" o"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// xxx")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 去糖化之后的近似表示")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" $next"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("$next "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" o"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" p "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" $next"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// xxx")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 源代码")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" data "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br")])])])]),t._v(" "),a("p",[t._v("for(let i = 0; i < 3; i++) {\ndata[i] = function(){\nconsole.log(i)\n}\n}")]),t._v(" "),a("p",[t._v("//去糖化近似表示\nvar data = [];\n{\nlet i = 0;\nfor(i;i<3;i++) {\nlet $next = i; // 块作用域和let保证每次迭代都是新的绑定\ndata[i] = function() {\nconsole.log($next)\n}\n}\n}")]),t._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("\n那么，在ES6之前我们使用立即执行表达式（IFFF）来实现，其实就是利用立即执行表达式模拟了一个块级作用域：\n\n```javascript\nvar data = [];\nfor(var i = 0; i < 3; i++) {\n\t (function(i){\n         data[i] = function() {\n             console.log(i)\n         }\n\t})(i)\n}\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br")])]),a("ul",[a("li",[a("p",[a("code",[t._v("const")]),t._v(" 的行为与"),a("code",[t._v("let")]),t._v(" 基本相同，唯一重要的区别是用它声明变量时必须同时初始化变量，且尝试修改"),a("code",[t._v("const")]),t._v("声明的变量会导致运行时错误。")]),t._v(" "),a("ul",[a("li",[t._v("在"),a("code",[t._v("for")]),t._v("循环的初始条件中使用"),a("code",[t._v("let")]),t._v("进行声明是可以的，但使用"),a("code",[t._v("const")]),t._v("不行，就是因为迭代变量会自增，违反了上述"),a("code",[t._v("cosnt声明的变量不能被修改")]),t._v("的规则。")]),t._v(" "),a("li",[t._v("但是在"),a("code",[t._v("for in")]),t._v(" 或 "),a("code",[t._v("for of")]),t._v(" 的初始条件中使用"),a("code",[t._v("const")]),t._v("是可以的，因为它声明的是对象或数组中的每一个子项，每次迭代都是创建一个新变量。")])])]),t._v(" "),a("li",[a("p",[t._v("六种简单数据类型和一种复杂数据类型(object)")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("特殊值 null 被认为是一个对空对象的引用")])]),t._v(" "),a("li",[a("p",[t._v("字面值 undefined主要用于比较，而且在 ECMA-262 第 3 版之前是不存在的。增加这个特殊值的目的就是为了正式明确空对象指针（ null ）和未初始化变量的区别。")])]),t._v(" "),a("li",[a("p",[t._v("对未声明的变量，只能执行一个有用的操作，就是对它调用 typeof 。（对未声明的变量调用 delete 也不会报错，但这个操作没什么用，实际上在严格模式下会抛出错误。）")])]),t._v(" "),a("li",[a("p",[t._v("任何时候，只要变量要保存对象，而当时又没有那个对象可保存，就要用 null 来填充该变量")])]),t._v(" "),a("li",[a("p",[t._v('假值：false/undefind/null/0/-0/NaN/""')])]),t._v(" "),a("li",[a("p",[t._v("八进制字面量在严格模式下是无效的，会导致 JavaScript 引擎抛出语法错误")])]),t._v(" "),a("li",[a("p",[t._v("默认情况下，ECMAScript 会将小数点后至少包含 6 个零的浮点值转换为科学记数法")])]),t._v(" "),a("li",[a("p",[t._v("ES6 中的八进制值通过前缀 0o 来表示；严格模式下，前缀 0 会被视为语法错误，如果要表示\n八进制值，应该使用前缀 0o")])]),t._v(" "),a("li",[a("p",[t._v("NaN ，意思是“不是数值”（Not a Number），用于表示本来要返回数值的操作\n失败了（而不是抛出错误）")])]),t._v(" "),a("li",[a("p",[t._v("任何涉及 NaN 的操作始终返回 NaN")])]),t._v(" "),a("li",[a("p",[t._v("NaN 不等于包括 NaN 在内的任何值")])]),t._v(" "),a("li",[a("p",[t._v("Number()/parseInt()/parseFloat()对比")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("原始类型")]),t._v(" "),a("th",[t._v("Number()")]),t._v(" "),a("th",[t._v("parseInt()")]),t._v(" "),a("th",[t._v("parseFloat()")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("Boolean")]),t._v(" "),a("td",[t._v("true->1, false->0")]),t._v(" "),a("td",[t._v("NaN")]),t._v(" "),a("td",[t._v("NaN")])]),t._v(" "),a("tr",[a("td",[t._v("Number")]),t._v(" "),a("td",[t._v("Number")]),t._v(" "),a("td",[t._v("Number->整数部分")]),t._v(" "),a("td",[t._v("Number")])]),t._v(" "),a("tr",[a("td",[t._v("null")]),t._v(" "),a("td",[t._v("0")]),t._v(" "),a("td",[t._v("NaN")]),t._v(" "),a("td",[t._v("NaN")])]),t._v(" "),a("tr",[a("td",[t._v("undefined")]),t._v(" "),a("td",[t._v("NaN")]),t._v(" "),a("td",[t._v("NaN")]),t._v(" "),a("td",[t._v("NaN")])]),t._v(" "),a("tr",[a("td",[t._v("String->NumberString")]),t._v(" "),a("td",[t._v("Number")]),t._v(" "),a("td",[t._v("Number")]),t._v(" "),a("td",[t._v("Nmuber")])]),t._v(" "),a("tr",[a("td",[t._v("String->FloatString")]),t._v(" "),a("td",[t._v("FloatNumber")]),t._v(" "),a("td",[t._v("Number->整数部分")]),t._v(" "),a("td",[t._v("Number")])]),t._v(" "),a("tr",[a("td",[t._v("String->Hex")]),t._v(" "),a("td",[t._v("demical")]),t._v(" "),a("td",[t._v("demical")]),t._v(" "),a("td",[t._v("0")])]),t._v(" "),a("tr",[a("td",[t._v("String->Ohter")]),t._v(" "),a("td",[t._v("NaN")]),t._v(" "),a("td",[t._v("NaN")]),t._v(" "),a("td",[t._v("NaN")])]),t._v(" "),a("tr",[a("td",[t._v("Object")]),t._v(" "),a("td",[t._v("valueOf->NaN?toString")]),t._v(" "),a("td",[t._v("valueOf->NaN?toString")]),t._v(" "),a("td",[t._v("valueOf->NaN?toString")])]),t._v(" "),a("tr",[a("td",[t._v('String->""')]),t._v(" "),a("td",[t._v("0")]),t._v(" "),a("td",[t._v("NaN")]),t._v(" "),a("td",[t._v("NaN")])])])])]),t._v(" "),a("li",[a("p",[t._v("字符字面量（非打印字符或十六进制编码）可以出现在字符串中的任意位置，且可以作为单个字符被解释（意味着在字符串的length中只占一位）")])]),t._v(" "),a("li",[a("p",[t._v("字符串拼接是先开辟一块可容纳拼接和字符串长度的空间，将拼接后的字符串放进去，然后再把进行拼接的字符串销毁（如果后面还有访问就不销毁：内存回收-引用计数）")])]),t._v(" "),a("li",[a("p",[t._v("String()方法并不等同于toString()：")]),t._v(" "),a("ul",[a("li",[t._v('String(null) 返回"null";')]),t._v(" "),a("li",[t._v('String(undefined) 返回"undefined";')]),t._v(" "),a("li",[t._v("String(other) 返回 other.toString();")]),t._v(" "),a("li",[t._v("null 与 undefined 没有 toString()方法")])])]),t._v(" "),a("li",[a("p",[t._v("技术上讲，模板字面量不是字符串，而是一种特殊的 JavaScript 句法表达式，只不过求值后得到的\n是字符串")]),t._v(" "),a("ul",[a("li",[t._v("所有插入的值都会使用 toString() 强制转型为字符串，而且任何 JavaScript 表达式都可以用于插\n值")]),t._v(" "),a("li",[t._v("嵌套的模板字符串无须转义")])])]),t._v(" "),a("li",[a("p",[t._v("因为符号属性是对内存中符号的一个引用，所以直接创建并用作属性的符号不会丢失")]),t._v(" "),a("ul",[a("li",[t._v("Symbol.asyncIterator: 用来表示实现异步迭代器API的函数，for-await-of 循环会利用这个函数执行异步迭代操作，它是 ES2018 规范定义的")]),t._v(" "),a("li",[t._v("Symbol.hasInstance: 表示“决定一个构造器对象是否认可一个对象是它的实例”的方法，由instanceof操作符使用。这个属性定义在 Function 的原型上，因此默认在所有函数和类上都可以调用。")]),t._v(" "),a("li",[t._v("Symbol.isConcatSpreadable: 表示对象是否应该用Array.prototype.concat打平其数组元素。（即调用concat方法操作类数组对象时是打平后合并到调用的数组中，还是直接作为一个元素追加到调用的数组末尾）")]),t._v(" "),a("li",[t._v("Symbol.iterator:  用来表示一个返回对象默认的迭代器的方法，由 for-of  语句使用，很多时候，返回的对象是实现了迭代器API的 Generator")]),t._v(" "),a("li",[t._v("Symbol.match: 表示一个能够匹配字符串的正则表达式方法，由 String.prototype.match方法使用。")]),t._v(" "),a("li",[t._v("Symbol.replace:  表示一个能够替换字符串子串的正则表达式方法，由 String.prototype.replace方法使用功能。")]),t._v(" "),a("li",[t._v("Symbol.search: 表示一个可返回字符串中匹配正则表达式的子串的索引的正则表达式方法，由String.prototype.search方法使用。")]),t._v(" "),a("li",[t._v("Symbol.species: 表示用来创建派生对象的构造函数")]),t._v(" "),a("li",[t._v("Symbol.split: 表示在匹配正则表达式的索引位置拆分字符串的方法。主要由String.prototype.split方法使用。")]),t._v(" "),a("li",[t._v("Symbol.toPrimitive: 表示一个将对象转换为相应原始值的方法。由ToPrimitive抽象操作使用。")]),t._v(" "),a("li",[t._v("Symbol.toStringTag: 表示用于创建对象的默认字符串描述的字符串，主要由Object.prototype.toString方法使用。")]),t._v(" "),a("li",[t._v("Symbol.unscopables: 表示一个对象，该对象所有的以及继承的属性，都会从关联对象的with环境绑定中排除。")])])]),t._v(" "),a("li",[a("p",[t._v("对象的本质是一组数组和功能的集合。")]),t._v(" "),a("ul",[a("li",[t._v("new对象实例时如果不需要给构造函数传参，则可以省略括号，但不推荐")]),t._v(" "),a("li",[t._v("所有Object实例都具有的属性和方法：\n"),a("ul",[a("li",[t._v("constructor: 构造函数，就是new它的时候new后面那个函数")]),t._v(" "),a("li",[t._v("hasOwnProperty(propertyName): 判断当前对象实例上是否存在给定属性，但不查找原型链")]),t._v(" "),a("li",[t._v("isPrototypeOf(object): 判断当前对象是否为另一个对象的原型")]),t._v(" "),a("li",[t._v("propertyIsEnumerable(propertyName): 用于判定给定属性是否可以枚举。")]),t._v(" "),a("li",[t._v("toLocaleString():  返回对象的字符串表示，该字符串反映对象所在的本地化执行环境。（即不同执行环境结果可能不同-比如浏览器和node就会不同）")]),t._v(" "),a("li",[t._v("toString(): 返回对象的字符串表示")]),t._v(" "),a("li",[t._v("valueOf(): 返回对象对应的字符串、数值或布尔值。")])])])])]),t._v(" "),a("li",[a("p",[t._v("当操作符应用于对象时，通常会调用valueOf()和/或toString()方法来取得可计算的值")]),t._v(" "),a("ul",[a("li",[t._v("前缀操作符会使得变量的值在语句被求值前改变（副作用）；")]),t._v(" "),a("li",[t._v("后缀操作符会使得变量的值在语句求值之后才改变。")]),t._v(" "),a("li",[t._v("前后缀操作符都只能应用于变量，不能直接作用于原始类型值。")]),t._v(" "),a("li",[t._v("一元加号应用到非数值前时，会执行与Number()转型函数一样的类型转换。")]),t._v(" "),a("li",[t._v("位操作并不直接应用到 64 位表示，而是先把值转换为32 位整数，再进行位操作，之后再把结果转换为 64 位")]),t._v(" "),a("li",[t._v("有符号整数使用 32 位的前 31 位表示整数值。第 32 位表示数值的符号，如 0 表示正，1 表示负，正值以真正的二进制格式存储，负值以一种称为二补数（或补码）的二进制编码存储。\n"),a("ul",[a("li",[t._v("补码： 反转每一位")]),t._v(" "),a("li",[t._v("二补数： 二进制-补码-加1")])])]),t._v(" "),a("li",[t._v("特殊值 NaN 和 Infinity在位操作中都会被当成 0 处理")]),t._v(" "),a("li",[t._v("按位非的最终效果是对数值取反并减 1")]),t._v(" "),a("li",[t._v("位操作的速度快得多。这是因为位操作是在数值的底层表示上完成的")]),t._v(" "),a("li",[t._v("左移会保留它所操作数值的符号")]),t._v(" "),a("li",[t._v("有符号右移会保留操作数值的符号，无符号右移则会将符号位占用为数值位，导致结果非常大。")]),t._v(" "),a("li",[t._v("逻辑非操作符首先将操作数转换为布尔值，然后再对其取反")]),t._v(" "),a("li",[t._v("同时使用两个叹号（ !! ），相当于调用了转型函数 Boolean()")]),t._v(" "),a("li",[t._v("逻辑与操作符两边，如果有null/NaN/undefined中的一个，则返回这一个，如果两边都是这三个中的一个，返回前面那个。")]),t._v(" "),a("li",[t._v("如果乘性操作符有不是数值的操作数,则该操作数会在后台被使用Number() 转型函数转换为数值。")]),t._v(" "),a("li",[t._v("乘法操作符\n"),a("ul",[a("li",[t._v("对无法表示的乘积，返回Infinity;")]),t._v(" "),a("li",[t._v("n * NaN = NaN (n为任意数)")]),t._v(" "),a("li",[t._v("Infinity * 0 = NaN;")]),t._v(" "),a("li",[t._v("Infinity * (+/-)n  = (+/-) Infinity (n !==0);")])])]),t._v(" "),a("li",[t._v("除法操作符\n"),a("ul",[a("li",[t._v("无法表示的商，返回Infinity")]),t._v(" "),a("li",[t._v("n / NaN || NaN / n =  NaN;(n为任意数)")]),t._v(" "),a("li",[t._v("Infinity / Infinity  = NaN;")]),t._v(" "),a("li",[t._v("0 / 0  = NaN")]),t._v(" "),a("li",[t._v("(+/-)n / 0 =  Infinity; (n !==0)")]),t._v(" "),a("li",[t._v("Infinity / (+/-)n = (+/-) Infinity(n !== Infinity);")])])]),t._v(" "),a("li",[t._v("取模操作符\n"),a("ul",[a("li",[t._v("(+/-)Infinity % n = NaN  (n为任意数)")]),t._v(" "),a("li",[t._v("n % 0  = NaN (n!==Infinity)")]),t._v(" "),a("li",[t._v("n % Infinity = n (n!==Infinity)")]),t._v(" "),a("li",[t._v("0 %  n = 0 (n != 0 && n !== Nan);")])])]),t._v(" "),a("li",[t._v("加法操作符\n"),a("ul",[a("li",[t._v("NaN与任何值相加等于NaN;")]),t._v(" "),a("li",[t._v("Infinity + Infinity = Infinity")]),t._v(" "),a("li",[t._v("-Infinity + -Infinity = - Infinity")]),t._v(" "),a("li",[t._v("+0 + +0 = +0;")]),t._v(" "),a("li",[t._v("-0 +-0 = -0;")]),t._v(" "),a("li",[t._v("-0 + +0 = +0;")]),t._v(" "),a("li",[t._v("string1 + string2 = 'string1string2'")]),t._v(" "),a("li",[t._v("string1  + notString = string1 + notString.toString()")])])]),t._v(" "),a("li",[t._v("减法操作符\n"),a("ul",[a("li",[t._v("NaN与任何值相减等于NaN")]),t._v(" "),a("li",[t._v("Infinity - Infinity = NaN")]),t._v(" "),a("li",[t._v("-Infinity -  -Infinity = NaN")]),t._v(" "),a("li",[t._v("Infinity - -Infinity = Infinity")]),t._v(" "),a("li",[t._v("-Infinity - Infinity = - Infinity")]),t._v(" "),a("li",[t._v("+0 - +0  =  +0")]),t._v(" "),a("li",[t._v("+0 -  -0 = -0;")]),t._v(" "),a("li",[t._v("-0 - -0 = +0")]),t._v(" "),a("li",[t._v("string/boolen/null/undefined: 先使用Number()函数转换后再计算")]),t._v(" "),a("li",[t._v("object,调用valueOf || toString方法转换后，再根据以上规则计算")])])]),t._v(" "),a("li",[t._v("关系操作符\n"),a("ul",[a("li",[t._v("如果操作数都是字符串，则逐个比较字符串中对应字符的编码。")]),t._v(" "),a("li",[t._v("在使用关系操作符比较两个字符串时，会发生一个有趣的现象。很多人认为小于意味着“字母顺序\n靠前”，而大于意味着“字母顺序靠后”，实际上不是这么回事。对字符串而言，关系操作符会比较字符串中对应字符的编码，而这些编码是数值。比较完之后，会返回布尔值。问题的关键在于，大写字母的编码都小于小写字母的编码")]),t._v(" "),a("li",[t._v("另一个奇怪的现象是在比较两个"),a("strong",[t._v("数值字符")]),t._v("串的时候")]),t._v(" "),a("li",[t._v("在大多数比较的场景中，如果一个值不小于另一个值，那就一定大于或等于它。但在比较 NaN 时，无论是小于还是大于等于，比较的结果都会返回 false")])])]),t._v(" "),a("li",[t._v("在赋值时使用逗号操作符分隔值，最终会返回表达式中最后一个值")])])]),t._v(" "),a("li",[a("p",[t._v("标签语句的典型应用场景是嵌套循环")])]),t._v(" "),a("li",[a("p",[t._v("with 语句的用途是将代码作用域设置为特定的对象，使用 with 语句的主要场景是针对一个对象反复操作，这时候将代码作用域设置为该对象能提供便利")])]),t._v(" "),a("li",[a("p",[t._v("switch 语句在比较每个条件的值时会使用全等操作符，因此不会强制转换数据类型")])])])])])])}),[],!1,null,null,null);s.default=e.exports}}]);