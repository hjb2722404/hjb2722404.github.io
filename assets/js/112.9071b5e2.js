(window.webpackJsonp=window.webpackJsonp||[]).push([[112],{535:function(v,_,e){"use strict";e.r(_);var l=e(15),i=Object(l.a)({},(function(){var v=this,_=v.$createElement,e=v._self._c||_;return e("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[e("h1",{attrs:{id:"js高程4阅读笔记-2-4-6"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#js高程4阅读笔记-2-4-6"}},[v._v("#")]),v._v(" js高程4阅读笔记（2）4-6")]),v._v(" "),e("p",[v._v("[TOC]")]),v._v(" "),e("h2",{attrs:{id:"_4-变量、作用域与内存"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-变量、作用域与内存"}},[v._v("#")]),v._v(" 4. 变量、作用域与内存")]),v._v(" "),e("ul",[e("li",[v._v("保存原始值的变量是按值（byvalue）访问的，因为我们操作的就是存储在变量中的实际值")]),v._v(" "),e("li",[v._v("JavaScript不允许直接访问内存位置，因此也就不能直接操作对象所在的内存空间")]),v._v(" "),e("li",[v._v("保存引用值的变量是按引用（by reference）访问的")]),v._v(" "),e("li",[v._v("尝试给原始值添加属性不会报错")]),v._v(" "),e("li",[v._v("在通过变量把一个原始值赋值到另一个变量时，原始值会被复制到新变量的位置")]),v._v(" "),e("li",[v._v("在把引用值从一个变量赋给另一个变量时复制的值实际上是一个指针")]),v._v(" "),e("li",[v._v("所有函数的参数都是按值传递的,如果是原始值，那么就跟原始值变量的复制一样，如果是\n引用值，那么就跟引用值变量的复制一样")]),v._v(" "),e("li",[v._v("typeof 虽然对原始值很有用，但它对引用值的用处不大")]),v._v(" "),e("li",[v._v("let 和 const 的顶级声明不会定义在全局上下文中，但在作用域链解析上效果是一样的。")]),v._v(" "),e("li",[v._v("函数参数被认为是当前上下文中的变量。")]),v._v(" "),e("li",[v._v("访问局部变量比访问全局变量要快，因为不用切换作用域")]),v._v(" "),e("li",[v._v("解除对一个值的引用并不会自动导致相关内存被回收。解除引用的关键在于确保相关的值已经不在上下文里了,因此它在下次垃圾回收时会被回收")]),v._v(" "),e("li",[v._v("使用const和let声明变量可能会更早地让垃圾回收程序介入。")]),v._v(" "),e("li",[v._v("利用V8的隐藏类，定义对象时尽量早地一次性声明所有属性，避免动态属性赋值，可以保证多个实例共享一个隐藏类。同理，将不想要的属性设置为null而不是delete删除，可以保持隐藏类继续共享，同时也能达到删除引用值供垃圾回收程序回收的效果。")]),v._v(" "),e("li",[v._v("内存泄露的三种情形\n"),e("ul",[e("li",[v._v("全局变量")]),v._v(" "),e("li",[v._v("定时器引用外部变量")]),v._v(" "),e("li",[v._v("闭包")])])]),v._v(" "),e("li",[v._v("使用对象池可以避免垃圾回收程序频繁运行带来的性能损耗。")])]),v._v(" "),e("h2",{attrs:{id:"_5-基本引用类型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-基本引用类型"}},[v._v("#")]),v._v(" 5. 基本引用类型")]),v._v(" "),e("ul",[e("li",[v._v("Date 类型将日期保存为自协调世界时（UTC，Universal Time Coordinated）时间 1970 年 1 月 1 日午夜（零时）至今所经过的毫秒数")]),v._v(" "),e("li",[v._v("Date 类型可以精确表示 1970 年 1 月 1 日之前及之后 285 616 年的日期")]),v._v(" "),e("li",[v._v("Date.parse() 方法接收一个表示日期的字符串参数，尝试将这个字符串转换为表示该日期的毫秒数")]),v._v(" "),e("li",[v._v("Date.UTC() 方法也返回日期的毫秒表示，参数是年、零起点月数（1 月是 0，2 月是 1，以此类推）、日（1~31）、时（0~23）、分、秒和毫秒。这些参数中，只有前两个（年和月）是必需的")]),v._v(" "),e("li",[v._v("Date 类型的 valueOf() 方法根本就不返回字符串，这个方法被重写后返回的是日期的毫秒表示")]),v._v(" "),e("li",[v._v("正则表达式的 valueOf() 方法返回正则表达式本身")]),v._v(" "),e("li",[v._v("正则表达式实例的属性\n"),e("ul",[e("li",[v._v("global：布尔值，标识是否设置了g标记")]),v._v(" "),e("li",[v._v("ignoreCase:：布尔值，表示是否设置了i标记")]),v._v(" "),e("li",[v._v("unicode：布尔值，表示是否设置了u标记")]),v._v(" "),e("li",[v._v("sticky：布尔值，表示是否设置了y标记")]),v._v(" "),e("li",[v._v("lastIndex： 整数，表示在源字符串中下一次搜索的开始位置，失踪从0开始")]),v._v(" "),e("li",[v._v("multiline： 布尔值，表示是否设置了m标记")]),v._v(" "),e("li",[v._v("dotAll：布尔值，表示是否设置了s标记")]),v._v(" "),e("li",[v._v("source：正则表达式的字面量字符串。没有开头和结尾的斜杠")]),v._v(" "),e("li",[v._v("flags： 正则表达式的标记字符串")])])]),v._v(" "),e("li",[v._v("正则表达式构造函数属性\n"),e("ul",[e("li",[v._v("input（$_）: 最后搜索的字符串")]),v._v(" "),e("li",[v._v("lastMatch（$&）：最后匹配的文本")]),v._v(" "),e("li",[v._v("lastParen（$+）：最后匹配的捕获组")]),v._v(" "),e("li",[v._v("leftContext（$`）：input字符串中出现在lastMatch前面的文本")]),v._v(" "),e("li",[v._v("rightContext（$'）：input字符串中出现在lastMatch 后面的文本")]),v._v(" "),e("li",[v._v("RegExp 构造函数的所有属性都没有任何 Web 标准出处，因此不要在生产环境中使用它们")])])]),v._v(" "),e("li",[v._v("引用类型与原始值包装类型的主要区别在于对象的生命周期。在通过 new 实例化引用类型后，得到的实例会在离开作用域时被销毁，而自动创建的原始值包装对象则只存在于访问它的那行代码执行期间。这意味着不能在运行时给原始值添加属性和方法")]),v._v(" "),e("li",[v._v("Object 构造函数作为一个工厂方法，能够根据传入值的类型返回相应原始值包装类型的实例。")]),v._v(" "),e("li",[v._v("使用 new 调用原始值包装类型的构造函数，与调用同名的转型函数并不一样")]),v._v(" "),e("li",[v._v("Numer\n"),e("ul",[e("li",[v._v("toString方法可传入标识基数的参数（进制）")]),v._v(" "),e("li",[v._v("toFixed方法可传入小数位数（四舍五入）")]),v._v(" "),e("li",[v._v("toExponential方法指定科学计数法位数")]),v._v(" "),e("li",[v._v("toPrecision方法返回指定总位数的数字字符串")]),v._v(" "),e("li",[v._v("isInteger判断是否为整数")]),v._v(" "),e("li",[v._v("isSafeInteger判断是否为安全整数")])])]),v._v(" "),e("li",[v._v("String\n"),e("ul",[e("li",[v._v("字符串的length计算字符数量，双字节也会按照单字节计算")]),v._v(" "),e("li",[v._v("charCodeAt 默认返回的是10进制码元编码，有必要转换为16进制的才能与UTF-16编码相符")]),v._v(" "),e("li",[v._v("fromCharCode既可以接受16进制编码也可以接受10进制编码")]),v._v(" "),e("li",[v._v("对于U+0000~U+FFFF的字符集，在Unicode中成为【基本多语言平面】(BMP)，为了表示更多字符，Unicode 将每个字符使用另外16位去选择一个【增补平面】,这种策略称为【代理对】")]),v._v(" "),e("li",[v._v("为正确解析既包含单码元字符又包含代理对字符的字符串，可以使用 codePointAt() 来代替charCodeAt()，如果传入的码元索引并非代理对的开头，就会返回错误的码点（可采用字符串迭代的方式获得正确的码点）； fromCharCode() 也有一个对应的 fromCodePoint() 。这个方法接收任意数量的码点，返回对应字符拼接起来的字符串。")]),v._v(" "),e("li",[v._v("由于某些Unicode字符可以有多种编码方式，为了解决同形不同码的字符之间的比较问题，可以应用normalizi方法将字符规范化（NFD、NFC、NFKD、NFKC）之后再比较。")]),v._v(" "),e("li",[v._v("字符长度补全：padStart()与 padEnd()")])])]),v._v(" "),e("li",[v._v("encodeURI() 不会编码属于 URL 组件的特殊字符，比如冒号、斜杠、问号、井号，而 encodeURIComponent() 会编码它发现的所有非标准字符")])]),v._v(" "),e("h2",{attrs:{id:"_6-集合引用类型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_6-集合引用类型"}},[v._v("#")]),v._v(" 6. 集合引用类型")]),v._v(" "),e("h3",{attrs:{id:"object"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#object"}},[v._v("#")]),v._v(" Object")]),v._v(" "),e("ul",[e("li",[v._v("虽然Object的实例没有多少功能，但很适合【存储】和【在应用程序间交换】数据")]),v._v(" "),e("li",[v._v("创建Object的两种方式：\n"),e("ul",[e("li",[v._v("new 操作符")]),v._v(" "),e("li",[v._v("对象字面量\n"),e("ul",[e("li",[v._v("左大括号（"),e("code",[v._v("{")]),v._v("）出现在[[表达式上下文]]中时代表是一个表达式的开始，出现在【语句上下文】中则表示一个语句块的开始")]),v._v(" "),e("li",[v._v("对象字面量中的尾逗号在古老的浏览器中会报错，但所有现代浏览器都支持这种写法")]),v._v(" "),e("li",[v._v("对象字面量中的【数值属性】会自动转换为字符串")]),v._v(" "),e("li",[v._v("在使用对象字面量方法定义对象时，并不会实际调用Object构造函数")])])])])]),v._v(" "),e("li",[v._v("多参数函数传参最好的方式是对必选参数使用命名参数，再通过一个对象字面量来封装多个可选参数")]),v._v(" "),e("li",[v._v("对象属性的存取有两种语法：\n"),e("ul",[e("li",[v._v("点语法")]),v._v(" "),e("li",[v._v("括号语法（可使用变量访问属性）")])])])]),v._v(" "),e("h3",{attrs:{id:"array"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#array"}},[v._v("#")]),v._v(" Array")]),v._v(" "),e("ul",[e("li",[e("p",[v._v("JS中数组的两个特点：")]),v._v(" "),e("ul",[e("li",[v._v("同一个数组中可存不同类型的数据")]),v._v(" "),e("li",[v._v("数组长度是动态增长的")])])]),v._v(" "),e("li",[e("p",[v._v("使用数组字面量创建数组时不会调用Array构造函数")])]),v._v(" "),e("li",[e("p",[v._v("ES6新增的Array构造函数的静态方法：")]),v._v(" "),e("ul",[e("li",[v._v("Array.from: 将类数组结构（任何可迭代结构）转换为数组实例\n"),e("ul",[e("li",[v._v("第二个可选参数是一个映射函数，可实现类似于Array.from().map()的效果")]),v._v(" "),e("li",[v._v("第三个可选参数可为映射函数（非箭头函数）中的this添加属性")])])]),v._v(" "),e("li",[v._v("Array.of()，将一组参数转换为数组实例\n"),e("ul",[e("li",[v._v("用于替代 "),e("code",[v._v("Array.prototype.slice.call(arguments)")])])])])])]),v._v(" "),e("li",[e("p",[v._v("直接使用字面量创建稀疏数组时，空位会被当做"),e("code",[v._v("empty")]),v._v(" 处理，数组的"),e("code",[v._v("map()")]),v._v(" 方法会跳过空位，但是使用ES6之后的Array.from() 方法或Array.of()方法创建稀疏数组，空位会被当做"),e("code",[v._v("undefined")]),v._v(" 处理，"),e("code",[v._v("map()")]),v._v(" 不会跳过空位")])]),v._v(" "),e("li",[e("p",[v._v("数组 length 属性的独特之处在于，它不是只读的。通过修改 length 属性，可以从数组末尾删除或添加元素")])]),v._v(" "),e("li",[e("p",[v._v("数组最多可以包含 4 294 967 295 个元素")])]),v._v(" "),e("li",[e("p",[e("code",[v._v("Array.isArray()")]),v._v("方法相比"),e("code",[v._v("instanceof")]),v._v("判断是否数组，可以忽略一个页面内有多个框架时的情况。")])]),v._v(" "),e("li",[e("p",[v._v("三个迭代器方法:")]),v._v(" "),e("ul",[e("li",[e("code",[v._v("kays()")]),v._v("——返回数组索引迭代器")]),v._v(" "),e("li",[e("code",[v._v("values()")]),v._v("——返回数组元素迭代器")]),v._v(" "),e("li",[e("code",[v._v("entries()")]),v._v("——返回数组索引/值对迭代器")])])]),v._v(" "),e("li",[e("p",[v._v("填充方法："),e("code",[v._v("fill(val, start,end)")]),v._v("——向一个已有的数组中插入全部或部分相同的值")])]),v._v(" "),e("li",[e("p",[v._v("复制方法： "),e("code",[v._v("copyWithin(insertIndex, copyStartIndex, copyEndIndex)")]),v._v("——按照指定范围浅复制数组中的部分内容，然后将它们插入到指 定索引开始的位置。")])]),v._v(" "),e("li",[e("p",[e("code",[v._v("toLocaleString()")]),v._v("方法也可能返回跟 "),e("code",[v._v("toString()")]),v._v("和 "),e("code",[v._v("valueOf()")]),v._v("相同的结果，但也不一定。在 调用数组的"),e("code",[v._v("toLocaleString()")]),v._v("方法时，会得到一个逗号分隔的数组值的字符串。它与另外两个方法 唯一的区别是，为了得到最终的字符串，会调用数组每个值的"),e("code",[v._v("toLocaleString()")]),v._v("方法，而不是"),e("code",[v._v("toString()")]),v._v("方法")])]),v._v(" "),e("li",[e("p",[v._v("两个排序方法")]),v._v(" "),e("ul",[e("li",[e("code",[v._v("sort()")]),v._v(" "),e("ul",[e("li",[v._v("默认会在每一项上调用 "),e("code",[v._v("String()")]),v._v("转型函数，然后比较字符串来决定顺序")]),v._v(" "),e("li",[v._v("使数组的元素都是数值， 也会先把数组转换为字符串再比较、排序")]),v._v(" "),e("li",[v._v("所以它允许传入一个比较函数，有用户指定比较逻辑")])])]),v._v(" "),e("li",[e("code",[v._v("reverse()")]),v._v("——反转顺序")]),v._v(" "),e("li",[e("code",[v._v("reverse()")]),v._v("和"),e("code",[v._v("sort()")]),v._v("都返回调用它们的数组的引用")])])]),v._v(" "),e("li",[e("p",[e("code",[v._v("concat()")]),v._v("方法可以在现有数组全部元素基础上 创建一个新数组，可以利用它打平数组（只能打平一层）。可以利用参数的"),e("code",[v._v("[Symbol.isConcatSpreadable]")]),v._v("属性强制打平或不打平。")])]),v._v(" "),e("li",[e("p",[v._v("在所有需要传入位置索引的数组方法中，如果索引为负值，就会以数值长度加上这个负值的结果确定位置。")])]),v._v(" "),e("li",[e("p",[v._v("三个严格相等搜索方法：")]),v._v(" "),e("ul",[e("li",[e("code",[v._v("indexOf()")]),v._v("——从开头开始搜索，返回匹配到的元素下标，无匹配返回-1")]),v._v(" "),e("li",[e("code",[v._v("lastIndexOf()")]),v._v("——从最后开始搜索，返回匹配到的元素下标，无匹配返回-1")]),v._v(" "),e("li",[e("code",[v._v("includes()")]),v._v("——从头开始搜索，返回是否匹配到的布尔值")])])]),v._v(" "),e("li",[e("p",[v._v("两个断言函数搜索方法（在断言函数中定义匹配条件）")]),v._v(" "),e("ul",[e("li",[e("code",[v._v("find()")]),v._v("——从最小索引开始，返回第一个匹配的元素")]),v._v(" "),e("li",[e("code",[v._v("findIndex()")]),v._v("——从最小索引开始，返回第一个匹配元素的下标")])])]),v._v(" "),e("li",[e("p",[v._v("五个迭代方法——都不改变原数组。")]),v._v(" "),e("ul",[e("li",[e("code",[v._v("every()")]),v._v("——对数组每一项都运行传入的函数，如果对每一项函数都返回 true，则这个方法返回 true")]),v._v(" "),e("li",[e("code",[v._v("filter()")]),v._v("——对数组每一项都运行传入的函数，函数返回 true 的项会组成数组之后返回")]),v._v(" "),e("li",[e("code",[v._v("forEach()")]),v._v("——对数组每一项都运行传入的函数，没有返回值。")]),v._v(" "),e("li",[e("code",[v._v("map()")]),v._v("——对数组每一项都运行传入的函数，返回由每次函数调用的结果构成的数组")]),v._v(" "),e("li",[e("code",[v._v("some()")]),v._v("——对数组每一项都运行传入的函数，如果有一项函数返回 true，则这个方法返回 true")])])]),v._v(" "),e("li",[e("p",[v._v("两个归并方法")]),v._v(" "),e("ul",[e("li",[e("code",[v._v("reduce(fn, initVal)")]),v._v("——从第一项遍历到最后一项")]),v._v(" "),e("li",[e("code",[v._v("reduceRight(fn, initVal)")]),v._v("——从最后一项遍历到第一项")]),v._v(" "),e("li",[e("code",[v._v("fn")]),v._v("接收四个参数\n"),e("ul",[e("li",[v._v("归并函数在上一项上执行后返回的值")]),v._v(" "),e("li",[v._v("当前项")]),v._v(" "),e("li",[v._v("当前项索引")]),v._v(" "),e("li",[v._v("数组本身")])])])])])]),v._v(" "),e("h3",{attrs:{id:"定型数组"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#定型数组"}},[v._v("#")]),v._v(" 定型数组")]),v._v(" "),e("ul",[e("li",[e("p",[v._v("在 "),e("code",[v._v("WebGL")]),v._v(" 的早期版本中，因为 "),e("code",[v._v("JavaScript")]),v._v(" 数组与原生数组之间不匹配，所以出现了性能问题。图形 驱动程序 "),e("code",[v._v("API")]),v._v("通常不需要以"),e("code",[v._v("JavaScript")]),v._v("默认双精度浮点格式传递给它们的数值，而这恰恰是 "),e("code",[v._v("JavaScript")]),v._v("数组在内存中的格式。")])]),v._v(" "),e("li",[e("p",[e("code",[v._v("Float32Array")]),v._v("实际上是一种“视图”，可以允许 "),e("code",[v._v("JavaScript")]),v._v(" 运行时访问一块名为 "),e("code",[v._v("ArrayBuffer")]),v._v("的 预分配内存。")])]),v._v(" "),e("li",[e("p",[e("code",[v._v("ArrayBuffer")])]),v._v(" "),e("ul",[e("li",[e("code",[v._v("ArrayBuffer")]),v._v(" 是所有定型数组及视图引用的基本单位。")]),v._v(" "),e("li",[e("code",[v._v("ArrayBuffer")]),v._v(" 分配的内存不能超过 Number.MAX_SAFE_INTEGER（2的53次方 -1）字\t节。")]),v._v(" "),e("li",[v._v("声明 "),e("code",[v._v("ArrayBuffer")]),v._v(" 分配的堆内存可以被当成垃圾回收，\t不用手动释放")]),v._v(" "),e("li",[v._v("要读取或写入 "),e("code",[v._v("ArrayBuffer")]),v._v("，就必须 通过视图。")])])]),v._v(" "),e("li",[e("p",[e("code",[v._v("DataView")])]),v._v(" "),e("ul",[e("li",[v._v("是一种视图，专为文件 I/O 和网络 I/O 设计")]),v._v(" "),e("li",[v._v("其"),e("code",[v._v("API")]),v._v(" 支持对缓冲数据的高度控制，但相比于其他类型的视图性能也差一些")]),v._v(" "),e("li",[e("code",[v._v("DataView")]),v._v("对缓冲内容没有 任何预设，也不能迭代。")]),v._v(" "),e("li",[v._v("必须在对【已有的】"),e("code",[v._v("ArrayBuffer")]),v._v("读取或写入时才能创建 "),e("code",[v._v("DataView")]),v._v("实例。")]),v._v(" "),e("li",[v._v("要通过 DataView 读取缓冲，还需要几个组件。\n"),e("ul",[e("li",[v._v("首先是要读或写的字节偏移量。可以看成 DataView 中的某种“地址”。")]),v._v(" "),e("li",[v._v("DataView 应该使用 ElementType 来实现 JavaScript 的 Number 类型到缓冲内二进制格式的转 换。")]),v._v(" "),e("li",[v._v("最后是内存中值的字节序。默认为大端字节序。")])])]),v._v(" "),e("li",[v._v("![[Pasted image 20210716162239.png]]")]),v._v(" "),e("li",[v._v("“字节序”指的是计算系统维护的一种字节顺序的约 定。DataView 只支持两种约定：大端字节序和小端字节序。大端字节序也称为“网络字节序”，意思 是最高有效位保存在第一个字节，而最低有效位保存在最后一个字节。小端字节序正好相反，即最低有 效位保存在第一个字节，最高有效位保存在最后一个字节")]),v._v(" "),e("li",[v._v("JavaScript 运行时所在系统的原生字节序决定了如何读取或写入字节，但 DataView 并不遵守这 个约定。对一段内存而言，DataView 是一个中立接口，它会遵循你指定的字节序。DataView 的所 有 API 方法都以大端字节序作为默认值，但接收一个可选的布尔值参数，设置为 true 即可启用小端 字节序")]),v._v(" "),e("li",[v._v("以第一个字节存0x80, 第二个字节存0x01为例（1个字节8bit）")])]),v._v(" "),e("p",[v._v("16进制0x80 ---\x3e  二进制 10000000\n16进制0x01 ---\x3e  二进制 00000001")]),v._v(" "),e("p",[v._v("大端字节序：")])])]),v._v(" "),e("p",[v._v("| 地址 | 0x0000 | 0x0001 | 0x0002 | 0x0003 |\n| ---- | ------ | ------ | ------ | ------ |\n| 数据 | 1000   | 0000   | 0000   | 0001  |")]),v._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[v._v("读取和计算： 2的0次方 + 2的15次方 = 1 + 32768 = 32769\n")])])]),e("p",[v._v("小端字节序：")]),v._v(" "),e("table",[e("thead",[e("tr",[e("th",[v._v("地址")]),v._v(" "),e("th",[v._v("0x0000")]),v._v(" "),e("th",[v._v("0x0001")]),v._v(" "),e("th",[v._v("0x0002")]),v._v(" "),e("th",[v._v("0x0003")])])]),v._v(" "),e("tbody",[e("tr",[e("td",[v._v("数据")]),v._v(" "),e("td",[v._v("0000")]),v._v(" "),e("td",[v._v("0001")]),v._v(" "),e("td",[v._v("1000")]),v._v(" "),e("td",[v._v("0000")])])])]),v._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[v._v("读取和计算： 2的7次方 + 2的8次方 = 128 + 256 = 384\n")])])]),e("ul",[e("li",[v._v("DataView 完成读、写操作的前提是必须有充足的缓冲区，否则就会抛出 RangeError：")]),v._v(" "),e("li",[v._v("定型数组\n"),e("ul",[e("li",[v._v("定型数组是另一种形式的 ArrayBuffer 视图。虽然概念上与 DataView 接近，但定型数组的区别 在于，它特定于一种 ElementType 且遵循系统原生的字节序")]),v._v(" "),e("li",[v._v("创建定型数组的方式\n"),e("ul",[e("li",[v._v("读取已有的缓冲")]),v._v(" "),e("li",[v._v("使用自有缓冲")]),v._v(" "),e("li",[v._v("填充可迭代结构")]),v._v(" "),e("li",[v._v("填充基于任意类 型的定型数组")]),v._v(" "),e("li",[e("code",[v._v("<ElementType>.from()")])]),v._v(" "),e("li",[e("code",[v._v("<ElementType>.of()")])])])]),v._v(" "),e("li",[v._v("定型数组的构造函数和实例都有一个 BYTES_PER_ELEMENT 属性，返回该类型数组中每个元素的大小")]),v._v(" "),e("li",[v._v("定型数组支持普通数组的大多数方法（concat/pop/push/shift/splice/unshift不支持）")]),v._v(" "),e("li",[v._v("定型数组有一个 Symbol.iterator 符号属性，因此可以通过 for..of 循环和扩展操作符来操作")]),v._v(" "),e("li",[v._v("定型数组也提供了两个新方法，可以快速向外或向内复制数据：\n"),e("ul",[e("li",[e("code",[v._v("set()")]),v._v("——从提供的数组或定型数组中把值复制到当前定型数组中指定的索引位置。")]),v._v(" "),e("li",[e("code",[v._v("subarray()")]),v._v("——基于从原始定型数组中复制的值返回一个新定型数组")])])]),v._v(" "),e("li",[v._v("定型数组中值的下溢和上溢不会影响到其他索引，但仍然需要考虑数组的元素应该是什么类型。定 型数组对于可以存储的每个索引只接受一个相关位，而不考虑它们对实际数值的影响")])])])]),v._v(" "),e("h3",{attrs:{id:"map-映射"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#map-映射"}},[v._v("#")]),v._v(" Map（映射）")]),v._v(" "),e("ul",[e("li",[v._v("基本操作\n"),e("ul",[e("li",[e("code",[v._v("new Map(可迭代对象)")]),v._v(" 新建（初始化）映射")]),v._v(" "),e("li",[e("code",[v._v("set()")]),v._v(" 添加键值对，返回映射实例，故而可以连续调用。")]),v._v(" "),e("li",[e("code",[v._v("get()")]),v._v(" 查询")]),v._v(" "),e("li",[e("code",[v._v("has()")]),v._v(" 检查存在性")]),v._v(" "),e("li",[e("code",[v._v(".size")]),v._v(" 获取键值对数量")]),v._v(" "),e("li",[e("code",[v._v("delete()")]),v._v(" 删除")]),v._v(" "),e("li",[e("code",[v._v("clear()")]),v._v(" 全部删除")]),v._v(" "),e("li",[e("code",[v._v("forEach()")]),v._v("  迭代键值对")]),v._v(" "),e("li",[e("code",[v._v("keys()")]),v._v(" 迭代键")]),v._v(" "),e("li",[e("code",[v._v("values()")]),v._v(" 迭代值")])])]),v._v(" "),e("li",[v._v("Map 可以用任何JS数据类型作为键")]),v._v(" "),e("li",[v._v("与Object不同，Map会维护键值对插入顺序，因此可以根据插入顺序执行迭代操作。")]),v._v(" "),e("li",[v._v("Map实例的"),e("code",[v._v("Symbol.iterator")]),v._v("属性引用了它的"),e("code",[v._v("entries()")]),v._v("方法，所以可以直接对映射实例使用扩展操作（"),e("code",[v._v("...")]),v._v("），把映射转换为数组。")]),v._v(" "),e("li",[v._v("Map与Object的选择\n"),e("ul",[e("li",[v._v("内存占用：给定固定大小内存，Map大约可以比Object多存储50%的键值对")]),v._v(" "),e("li",[v._v("插入性能：插入Map稍微快一点，如果涉及大量插入操作，那么Map性能更佳")]),v._v(" "),e("li",[v._v("查找速度： 如果涉及大量查找操作，Object会更好一些")]),v._v(" "),e("li",[v._v("删除性能：如果涉及大量删除操作，Map更快。")])])])]),v._v(" "),e("h3",{attrs:{id:"weakmap-弱映射"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#weakmap-弱映射"}},[v._v("#")]),v._v(" WeakMap(弱映射)")]),v._v(" "),e("ul",[e("li",[e("code",[v._v("weak")]),v._v(" 描述的是JS垃圾回收程序对待弱映射中键的方式")]),v._v(" "),e("li",[v._v("弱映射中的键只能是Object 或者 继承自 Object 的类型。")]),v._v(" "),e("li",[v._v("其"),e("code",[v._v("API")]),v._v(" 是 Map 的子集。它没有"),e("code",[v._v("clear()")]),v._v(" 操作，没有迭代操作（因为随时可能被销毁）。")]),v._v(" "),e("li",[v._v("弱映射中键对外部对象的引用不会阻止外部对象的垃圾回收。（除非有其它地方引用这个键）")]),v._v(" "),e("li",[v._v("用途：\n"),e("ul",[e("li",[v._v("实现真正的私有变量【需要使用闭包包装类】")]),v._v(" "),e("li",[v._v("DOM节点元数据。因为弱映射实例不会妨碍垃圾回收，所以非常适合保存关联元数据。")])])])]),v._v(" "),e("h3",{attrs:{id:"set"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#set"}},[v._v("#")]),v._v(" Set")]),v._v(" "),e("ul",[e("li",[v._v("基本操作\n"),e("ul",[e("li",[e("code",[v._v("new Set(可迭代对象)")]),v._v("  新建（初始化）")]),v._v(" "),e("li",[e("code",[v._v("add()")]),v._v(" 增加值，返回集合实例，可连续操作")]),v._v(" "),e("li",[e("code",[v._v("has()")]),v._v(" 检查存在性")]),v._v(" "),e("li",[e("code",[v._v("delete()")]),v._v(" 删除，返回一个布尔值，标识集合中是否存在要删除的值")]),v._v(" "),e("li",[e("code",[v._v("clear()")]),v._v(" 删除全部")]),v._v(" "),e("li",[e("code",[v._v(".size")]),v._v("取得元素数量")]),v._v(" "),e("li",[e("code",[v._v("values()")]),v._v(" 迭代值")]),v._v(" "),e("li",[e("code",[v._v("keys()")]),v._v(" 上述"),e("code",[v._v("values()")]),v._v("的别名")]),v._v(" "),e("li",[e("code",[v._v("entries()")]),v._v(" 返回一个迭代器，可以按照插入顺序产生包含两个元素的数组，这两个元 素是集合中每个值的重复出现")]),v._v(" "),e("li",[e("code",[v._v("forEach()")]),v._v(" 迭代键值对，键和值其实都是值")])])]),v._v(" "),e("li",[v._v("Set 可以包含任何JS数据类型作为值")]),v._v(" "),e("li",[v._v("Set的"),e("code",[v._v("Symbol.iterator")]),v._v("属性引用了它自身的"),e("code",[v._v("values()")]),v._v(" 方法取得迭代器")]),v._v(" "),e("li",[v._v("可直接对集合实例使用扩展操作（"),e("code",[v._v("...")]),v._v("）,把集合转换为数组")])]),v._v(" "),e("h3",{attrs:{id:"weakset"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#weakset"}},[v._v("#")]),v._v(" WeakSet")]),v._v(" "),e("ul",[e("li",[e("code",[v._v("weakSet")]),v._v(" 中的"),e("code",[v._v("weak")]),v._v(" 描述的是JS垃圾回收程序对待弱集合中值的方式")]),v._v(" "),e("li",[v._v("弱集合中的值只能是 Object 或者继承自 Object 的类型，尝试使用非对象设置值会抛出 TypeError")]),v._v(" "),e("li",[v._v("操作是 Set 操作的子集，没有"),e("code",[v._v("clear()")]),v._v("操作和迭代方法")]),v._v(" "),e("li",[v._v("弱集合中值对外部对象的引用不会阻止外部对象的垃圾回收。（除非有其它地方引用这个值）")]),v._v(" "),e("li",[v._v("目前知道的用途是给DOM节点打标签")])])])}),[],!1,null,null,null);_.default=i.exports}}]);